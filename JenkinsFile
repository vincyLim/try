pipeline {
    agent any

    environment {
    JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
    PATH = "${JAVA_HOME}/bin:${PATH}"
    }

    tools {
        maven 'Maven 3.8.4'
        jdk 'JDK 17'
    }

    stages {
        stage('Checkout') {
            steps {
                bat 'echo passed'
            }
        }

    stage('Build and Test') {
    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        M2_HOME = '/usr/share/maven'
        PATH = "${JAVA_HOME}/bin:${M2_HOME}/bin:${PATH}"
    }
    steps {
        bat '''
            mvn -version
            mvn clean compile
            mvn test
            mvn package -DskipTests
        '''
    }
    post {
        always {
            // Publish test results
            junit 'target/surefire-reports/TEST-*.xml'
            // Publish JaCoCo code coverage report
            publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
        }
    }
}

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://34.94.37.99:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    bat 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "lishan2023/currency-converter:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        bat "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        bat "docker build -t ${DOCKER_IMAGE} ."
                        bat "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Trivy Image Scanning') {
            steps {
                bat "trivy image lishan2023/currency-converter:${BUILD_NUMBER}"
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Spring-Boot-calculator-app"
                GIT_USER_NAME = "Bhaktabahadurthapa"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    bat '''
                        git config user.email "Bhaktathapamgr5@gmail.com"
                        git config user.name "Bhaktabahadurthapa"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
                        git add deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}